"use strict";(self.webpackChunkplatform_ui=self.webpackChunkplatform_ui||[]).push([[7442],{"./libs/ui/src/lib/modules/form-controls/dropdown-plus/dropdown-plus.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>UiDropdownPlusComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"),debounceTime=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js");let UiDropdownPlusComponent=class UiDropdownPlusComponent{constructor(){this.multiSelect=!0,this.singleSelectAutoClose=!0,this.noBorder=!1,this.view="button",this.animIcon=!0,this.icon="bi-filter",this.maxItemsShown=5,this.small=!1,this.showSearch=!1,this.showSelectClearBtns=!1,this.showCheckbox=!0,this.disabled=!1,this.loading=!1,this.paddingTop=0,this.selectionChange=new core.EventEmitter,this.openChange=new core.EventEmitter,this.triggerClicked=new core.EventEmitter,this.searchChange=new core.EventEmitter,this.optionsCleared=new core.EventEmitter,this.selectedOptions=[],this.searchText="",this.triggerLabel="",this.disabledItemsLength=0,this.menuOpen=!1,this.optionTooltips=[],this.tooltipText="",this.iconClass=["anim","bi-caret-down-fill"],this.focusIndex=-1,this.selectedList=[],this._label="",this._loading=new BehaviorSubject.t(!1)}set label(label){this._label=label,this.triggerLabel=label,setTimeout((()=>{this.updateTriggerLabel()}))}get label(){return this._label}set setOptions(options){this.options=options,this._optionsBackup=this.options,this.updateTriggerLabel()}ngOnInit(){this.triggerLabel=this._label,this._optionsBackup=this.options,this._loading.pipe((0,debounceTime.B)(500)).subscribe((value=>{this.loading=!1}))}onClickedOutside(e){}setFocusOnFirstMenuItem(){setTimeout((()=>{null!==document.getElementById(this.id+"_searchTextInput")&&document.getElementById(this.id+"_searchTextInput").focus()}),200)}clearHilighted(){this.focusIndex=-1,void 0!==this._hilighted&&this._hilighted.classList.remove("hilighted-item")}unSelectItem(itemId){this.options.find((item=>item.id===itemId)).value=!1,this.updateTriggerLabel(),this.selectionChange.emit({id:this.id,selectedOptions:this.getSelectedItems()})}getSelectedItems(){return void 0!==this._optionsBackup&&(this.selectedList=this._optionsBackup.filter((name=>!0===name.value))),this.selectedList}clearSelection(){this.options.forEach((option=>{option.value=!1})),this.clearHilighted(),this.updateTriggerLabel(),this.selectionChange.emit({id:this.id,selectedOptions:this.getSelectedItems()})}clearSearch(){this.searchText="",this.options=this._optionsBackup}updateTriggerLabel(selectionChanged=!0){setTimeout((()=>{this.selectedOptions;this.selectedOptions=this._optionsBackup.filter((name=>!0===name.value)),0===this.selectedOptions.length?this.triggerLabel=this._label:1===this.selectedOptions.length?this.triggerLabel=this.selectedOptions[0].label:this.triggerLabel=this._label+` (${this.selectedOptions.length})`,this.disabledItemsLength=this._optionsBackup.filter((name=>!0===name.disabled)).length}),100)}triggerClick(){!1===this.disabled&&void 0!==this.nbgDropdown&&!1===this.menuOpen&&this.nbgDropdown.open();const triggerEle=document.getElementById(this.externalTriggerEleId);if(void 0!==this.externalTriggerEleId&&null!==this.externalTriggerEleId&&null!=triggerEle){const dropPanelEle=document.getElementById(this.id+"_drop-panel");dropPanelEle.style.top=triggerEle.offsetTop+triggerEle.offsetHeight+this.paddingTop+"px",dropPanelEle.style.left=triggerEle.offsetLeft+"px"}this.triggerClicked.emit({id:this.id,open:this.menuOpen,selectedOptions:this.getSelectedItems()})}onOptionFocus(e){this.showTooltip(e)}showTooltip(e){const ele=e.target.getElementsByClassName("text-truncate")[0];ele.scrollWidth>ele.offsetWidth?this.tooltipText=e.target.innerText:this.tooltipText=""}isElementVisible(el,holder){holder=holder||document.body;const{top,bottom,height}=el.getBoundingClientRect();return!(bottom>holder.getBoundingClientRect().bottom)}onOpenChange(open){if(!1===this.disabled){this.menuOpen=open;const dropPanel=document.getElementById(this.id+"_drop-panel"),optionsPanel=document.getElementById(this.id+"_options-panel");null!==dropPanel&&(dropPanel.style.visibility="hidden",optionsPanel.style.maxHeight="0",!0===open?(this.openChange.emit({id:this.id,open:this.menuOpen,selectedOptions:this.getSelectedItems()}),this.focusIndex=-1,this.setFocusOnFirstMenuItem(),setTimeout((()=>{this.checkHeight(),dropPanel.style.visibility="visible",null!==optionsPanel&&document.getElementById(this.id+"_options-panel").focus()}),50)):(this.clearHilighted(),this.clearSearch(),this.openChange.emit({id:this.id,open:this.menuOpen,selectedOptions:this.getSelectedItems()})))}else this.menuOpen=!1}checkWidth(element){return element.scrollWidth>element.offsetWidth}checkHeight(){const dropPanel=document.getElementById(this.id+"_drop-panel"),optionsPanel=document.getElementById(this.id+"_options-panel");if(null!==optionsPanel&&null!==dropPanel&&0!==this.options.length){dropPanel.style.visibility="hidden";const menuItemHeight=Math.ceil(this.menuItemsRef.get(0).nativeElement.getBoundingClientRect().height);this.options.length<this.maxItemsShown?optionsPanel.style.height=String(menuItemHeight*this.options.length+"px"):optionsPanel.style.height=String(menuItemHeight*this.maxItemsShown+"px"),optionsPanel.style.maxHeight=String(menuItemHeight*this.maxItemsShown+"px"),dropPanel.style.visibility="visible"}}onSearchChange(){if(this.focusIndex=-1,0!==this.searchText.length){const tempSearch=this.searchText.toLowerCase(),temp=this._optionsBackup.filter((name=>name.label.toLowerCase().includes(tempSearch)));this.loading=!0,this._loading.next(!0),0!==temp.length?this.options=temp:this.options=[]}else this.options=this._optionsBackup;setTimeout((()=>{this.updateTriggerLabel(!1),this.checkHeight(),this.searchChange.emit({id:this.id,selectedOptions:this.getSelectedItems()})})),this._loading.next(!0)}onMouseOver(event){this.showTooltip(event)}onOptionClick(option,event){event.preventDefault(),setTimeout((()=>{option.value=!option.value,this.clearHilighted(),this.focusIndex=this.options.findIndex((tempOption=>tempOption.id===option.id)),!1!==option.disabled&&null!==option.disabled||(!1===this.multiSelect&&(this.options.forEach((tempOption=>{tempOption.id!==option.id&&(tempOption.value=!1)})),!0===this.singleSelectAutoClose&&this.nbgDropdown.close()),this.updateTriggerLabel(),this.selectionChange.emit({id:this.id,selectedOptions:this.getSelectedItems()}))}),50)}onSelectAllClick(){this.options.forEach((option=>{!1===option.disabled&&(option.value=!0)})),this.updateTriggerLabel(),this.selectionChange.emit({id:this.id,selectedOptions:this.getSelectedItems()}),this.clearHilighted()}onClearClick(){this.options.forEach((option=>{!1===option.disabled&&(option.value=!1)})),this.updateTriggerLabel(),this.selectionChange.emit({id:this.id,selectedOptions:this.getSelectedItems()}),this.clearHilighted(),this.optionsCleared.emit({id:this.id,selectedOptions:this.getSelectedItems()})}onSearchClearClick(){this.searchText="",this.onSearchChange()}onKeyDown(event){"Escape"===event.key&&(event.preventDefault(),event.stopPropagation()),this.updateTriggerLabel()}};UiDropdownPlusComponent.ctorParameters=()=>[],UiDropdownPlusComponent.propDecorators={externalTriggerEleId:[{type:core.Input}],id:[{type:core.Input}],label:[{type:core.Input}],setOptions:[{type:core.Input}],multiSelect:[{type:core.Input}],singleSelectAutoClose:[{type:core.Input}],noBorder:[{type:core.Input}],view:[{type:core.Input}],animIcon:[{type:core.Input}],icon:[{type:core.Input}],maxItemsShown:[{type:core.Input}],small:[{type:core.Input}],showSearch:[{type:core.Input}],showSelectClearBtns:[{type:core.Input}],showCheckbox:[{type:core.Input}],disabled:[{type:core.Input}],loading:[{type:core.Input}],paddingTop:[{type:core.Input}],selectionChange:[{type:core.Output}],openChange:[{type:core.Output}],triggerClicked:[{type:core.Output}],searchChange:[{type:core.Output}],optionsCleared:[{type:core.Output}],nbgDropdown:[{type:core.ViewChild,args:["nbgDropdown"]}],ngbDropPanel:[{type:core.ViewChild,args:["ngbDropPanel"]}],menuItemsRef:[{type:core.ViewChildren,args:["menuItemsRef"]}]},UiDropdownPlusComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-dropdown-plus",template:'<div [id]="id + \'_dropdown_container\'" class="d-flex" (clickOutside)="onClickedOutside($event)"  >\n\n    <div\n        [id]="id + \'_Dropdown\'"\n        ngbDropdown\n        display="static"\n        #nbgDropdown="ngbDropdown"\n        class="d-inline-block dropdown"\n        [ngClass]="{\'small\': small === true, \'disabled\': disabled === true, \'trigger-position\': externalTriggerEleId !== undefined }"\n        [placement]="\'bottom-left\'"\n        [autoClose]="\'outside\'"\n        (openChange)="onOpenChange($event)"\n    >\n\n        \x3c!-- Button Trigger --\x3e\n        <button\n            *ngIf="view === \'button\'"\n            ngbDropdownToggle\n            type="button"\n            [ngClass]="{\'no-border\': noBorder === true, \'open\': menuOpen === true}"\n            class="btn btn-outline-primary trigger d-flex align-items-center"\n            [id]="id + \'_trigger\'"\n            >\n            <div style="max-width: 200px;" class="d-inline-block text-truncate">\n                {{triggerLabel}}\n            </div>\n            <i [ngClass]="{\'anim\': animIcon === true}" class="bi bi-caret-down-fill ms-1 d-inline-block bi-sm"></i>\n        </button>\n\n        \x3c!-- Quick Filter Trigger --\x3e\n        <div\n            *ngIf="view === \'quick-filter\'"\n            ngbDropdownToggle\n            class="d-flex align-items-center quick-filter"\n            [id]="id + \'_trigger\'"\n            [ngClass]="{\'open\': menuOpen === true, \'option-selected\': getSelectedItems().length !== 0}"\n            (click)="triggerClick();"\n        >\n            <div class="label d-inline-block text-truncate" >\n                {{triggerLabel}}\n            </div>\n            <div>\n                <i\n                    class="bi ms-1 d-inline-block anim"\n                    [ngClass]="{\'bi-caret-down-fill\': getSelectedItems().length === 0, \'bi-filter\': getSelectedItems().length !== 0}"\n                >\n                </i>\n            </div>\n        </div>\n\n        \x3c!-- None Filter Trigger --\x3e\n        <div\n            *ngIf="view === \'none\'"\n            [id]="id + \'_triggerNone\'"\n            class="d-none"\n            ngbDropdownToggle\n        >\n        </div>\n\n        \x3c!-- drop-panel --\x3e\n        <div style="position: absolute;" [id]="this.id + \'_drop-panel\'" class="drop-panel h-auto" ngbDropdownMenu #ngbDropPanel (keyup)="onKeyDown($event)">\n\n            \x3c!-- Search Input --\x3e\n            <div *ngIf="showSearch === true" class="m-2 form-group d-flex align-items-center">\n                <i class="bi bi-search bi-md left"></i>\n                <input [(ngModel)]="searchText" (ngModelChange)="onSearchChange()" class="form-control" [id]="id + \'_searchTextInput\'" placeholder="{{\'COMMON.SEARCH\' | translate}}" autocomplete="off">\n                <i *ngIf="searchText.length !== 0" class="bi bi-x-lg bi-md right" (click)="onSearchClearClick()"></i>\n            </div>\n            \x3c!-- <div *ngIf="loading === false"> --\x3e\n\n            <div [ngClass]="{\'invisible h-0\': loading === true}" >\n\n                \x3c!-- Select All Button --\x3e\n                \x3c!--  --\x3e\n                <div class="select-all-clear" *ngIf="options.length !== 0">\n\n                    <button\n                        type="button"\n                        class="btn btn-link btn-md d-inline-block select-all m-2 ms-3 select-all-btn"\n                        *ngIf="showSelectClearBtns === true && multiSelect === true && selectedOptions.length !== this.options.length - this.disabledItemsLength"\n                        [id]="id + \'SelectAllBtn\'"\n                        [disabled]="selectedOptions.length === this.options.length - this.disabledItemsLength"\n                        (click)="onSelectAllClick()"\n                    >\n                        {{\'COMMON.SELECT_ALL\' | translate}}\n                    </button>\n\n                    \x3c!-- Clear Button --\x3e\n                    <button\n                        type="button"\n                        class="btn btn-link btn-md d-inline-block select-all m-2 ms-3 clear-btn"\n                        *ngIf="showSelectClearBtns === true && multiSelect === true && selectedOptions.length !== 0"\n                        [id]="id + \'clearBtn\'"\n                        [disabled]="selectedOptions.length === 0"\n                        (click)="onClearClick()"\n                    >\n                        {{\'COMMON.CLEAR\' | translate}}\n                    </button>\n\n                </div>\n\n                \x3c!-- Divider --\x3e\n                <div *ngIf="showSearch || showSelectClearBtns" class="dropdown-divider mt-0 mb-0"></div>\n\n                \x3c!-- Option Panel --\x3e\n                <div\n                    class="options-panel h-auto"\n                    [id]="this.id + \'_options-panel\'"\n                    [ngClass]="{\'invisible\': options.length === 0}"\n                >\n                    \x3c!-- Option Buttons --\x3e\n                    <button\n                        class="ps-3"\n                        container="body"\n                        ngbDropdownItem\n                        #menuItemsRef\n                        *ngFor="let option of options; let i = index;"\n                        [ngClass]="{\'selected-item\': option.value === true}"\n                        [id]="id + \'_Option_\' + option.id"\n                        [disabled]="option.disabled"\n                        [placement]="\'top\'"\n                        [ngbTooltip]="tooltipText"\n                        (click)="onOptionClick(option, $event)"\n                        (mouseenter)="onMouseOver($event)"\n                        (focus)="onOptionFocus($event)"\n                        >\n                        <div class="form-check pt-2" [ngClass]="{\'ps-4\': multiSelect === true}">\n                            <input *ngIf="multiSelect === true" tabindex="-1" class="form-check-input pointer" type="checkbox" [(ngModel)]="option.value" [id]="id + \'_Option_Checkbox_\' + option.id" >\n                            <label class="form-check-label w-100 pointer" [for]="id + \'_Option_Checkbox_\' + option.id">\n                                <ngb-highlight [id]="id + \'_Option_Text_\' + option.id" class="d-block text-truncate" result="{{option.label | translate: option.labelParams}}" [term]="searchText"></ngb-highlight>\n                            </label>\n                        </div>\n                    </button>\n                </div>\n\n                \x3c!-- No result --\x3e\n                <div [id]="id + \'_noResult\'" *ngIf="options.length === 0" class="m-3 text-gray-700 d-flex align-items-center">\n                    {{\'COMMON.NO_RESULT_FOUND\' | translate}}\n                </div>\n            </div>\n\n            <div [ngClass]="{\'d-none\': loading === false}">\n\n                \x3c!-- Divider --\x3e\n                <div class="dropdown-divider mt-0 mb-0"></div>\n\n                <div [id]="id + \'_loading\'" *ngIf="loading === true" class="m-3 text-gray-700 d-flex align-items-center">\n                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>\n                    {{\'COMMON.LOADING_RESULTS\' | translate}}\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n',styles:[".search-input-icon {\n  background-color: #fff;\n  border-style: none;\n  color: #a8abae;\n  z-index: 1001;\n}\n\n.form-control {\n  padding-left: 40px;\n  padding-right: 30px;\n}\n\n.form-group .bi {\n  position: absolute;\n  color: #d2d6da;\n}\n\n.form-group .bi.left {\n  padding-left: 15px;\n}\n\n.form-group .bi.right {\n  left: inherit;\n  right: 20px;\n}\n\n.form-group .bi.right:hover {\n  color: #2a2b2c;\n}\n\n.dropdown-toggle::after {\n  display: none;\n}\n\n.btn.trigger.no-border {\n  border: none;\n  box-shadow: none !important;\n  padding-left: 0px;\n  padding-right: 0px;\n}\n\n.btn.hi-lite {\n  border: 1px solid #00857C;\n}\n\n.btn.btn-link {\n  padding: 0;\n}\n\n.btn.btn-link:hover {\n  text-decoration: underline;\n}\n\n.btn.btn-link:focus {\n  text-decoration: underline;\n  color: #006a63;\n}\n\n.dropdown-menu {\n  padding: 0;\n}\n\n.dropdown-item {\n  min-height: 40px;\n  padding: 0.25rem 1rem;\n  padding-left: 0.5rem;\n}\n\n.dropdown-item.selected-item {\n  background-color: #e6f3f2;\n}\n\n.dropdown-item.selected-item:focus {\n  background-color: #cce7e5;\n}\n\n.dropdown-item.selected-item:hover {\n  background-color: #cce7e5;\n}\n\n.dropdown-item.hilighted-item {\n  background-color: #d2d6da;\n}\n\n.dropdown-item.hilighted-item:focus {\n  background-color: #a8abae;\n}\n\n.dropdown {\n  cursor: pointer;\n}\n\n.dropdown.disabled .quick-filter {\n  color: #a8abae;\n  cursor: default;\n}\n\n.dropdown.disabled .quick-filter.option-selected {\n  color: #a8abae;\n  cursor: default;\n}\n\n.dropdown .quick-filter.option-selected {\n  color: #00857C;\n}\n\n.form-check {\n  padding-left: 0;\n}\n\n.small * {\n  font-size: 0.875rem;\n}\n\n.h-0 {\n  max-height: 0;\n}\n\n.dropup.trigger-position, .dropend.trigger-position, .dropdown.trigger-position, .dropstart.trigger-position {\n  position: inherit;\n}"]}),(0,tslib_es6.Sn)("design:paramtypes",[])],UiDropdownPlusComponent)}}]);