"use strict";(self.webpackChunkplatform_ui=self.webpackChunkplatform_ui||[]).push([[5802],{"./libs/ui/src/lib/modules/grid/components/custom-multiselect-header/custom-multiselect-header.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>UiCustomMultiSelectHeaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/__ivy_ngcc__/fesm2015/ngx-translate-core.js");let UiCustomMultiSelectHeaderComponent=class UiCustomMultiSelectHeaderComponent{constructor(_translateService){this._translateService=_translateService,this.headerCheckboxLabel=this._translateService.instant("COMMON.SELECT"),this.disabled=!1,this.selectedRows=[],this.noSort="active",this.selectionChange$=new core.EventEmitter}agInit(params){this.gridApi=params.api,this.params=params,this.id=params.gridId+"-multi-select-header",this.selectionChange$=params.selectionChange,this.rowModelType=params.rowModelType,params.api.addEventListener("filterChanged",(event=>{setTimeout((()=>{this.gridApi.deselectAll()}))})),params.api.addEventListener("rowSelected",(event=>{this.onRowSelected(event)}))}onRowSelected(event){if(event.node.selectable){const totalFilteredRows=this.gridApi.getDisplayedRowCount(),currentPageRows=this.gridApi.paginationGetPageSize();this.indeterminateState=this.multiSelectCheckbox.nativeElement.indeterminate,this.checkedState=this.multiSelectCheckbox.nativeElement.checked,this.selectedRows=this.gridApi.getSelectedRows(),0===this.selectedRows.length?(this.checkedState=!1,this.indeterminateState=!1,this.ariaCheckedState=!1):this.selectedRows.length===totalFilteredRows||this.selectedRows.length===currentPageRows?(this.checkedState=!0,this.indeterminateState=!1,this.ariaCheckedState=!0):this.selectedRows.length<totalFilteredRows?(this.checkedState=!1,this.indeterminateState=!0,this.ariaCheckedState="mixed"):console.error("rowSelected: error determining checkbox state"),this.selectionChange$&&this.selectionChange$.emit({gridId:this.id,selectedRows:this.selectedRows})}else console.error(`row is not selectable (row# = ${event.rowIndex}`)}onToggle(event){event.preventDefault(),event.stopPropagation(),this.indeterminateState=this.multiSelectCheckbox.nativeElement.indeterminate,this.checkedState=this.multiSelectCheckbox.nativeElement.checked,this.toggleAll()}onColumnHeaderClick(event){if(event.preventDefault(),event.stopPropagation(),!0===this.params.enableSorting){let sortDirection;void 0===this.params.column.getSort()?sortDirection="desc":"desc"===this.params.column.getSort()?sortDirection="asc":"asc"===this.params.column.getSort()&&(sortDirection=null),this.sortDirection=sortDirection,this.params.columnApi.applyColumnState({state:[{colId:this.params.column.getColId(),sort:sortDirection,sortIndex:0}],defaultState:{sort:null}})}}onCellClick(event){event.preventDefault(),event.stopPropagation(),this.checkedState=!this.multiSelectCheckbox.nativeElement.checked,this.indeterminateState=!1,this.toggleAll()}refresh(params){return!1}ngOnInit(){}ngOnDestroy(){this.selectionChange$.unsubscribe()}toggleAll(){"clientSide"!==this.rowModelType?console.error("toggleAll: Multi-Select is only supported for client-side row models."):this.indeterminateState?console.error('toggleAll: checkbox in "mixed" state.'):this.checkedState?this.gridApi.selectAllFiltered():this.checkedState||this.gridApi.deselectAllFiltered()}};UiCustomMultiSelectHeaderComponent.ctorParameters=()=>[{type:ngx_translate_core.c$}],UiCustomMultiSelectHeaderComponent.propDecorators={multiSelectCheckbox:[{type:core.ViewChild,args:["multiSelectCheckbox"]}]},UiCustomMultiSelectHeaderComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-custom-multiselect-header",template:'<div class="d-flex align-items-center w-100 h-100">\n    <div class="grid-multiselect-checkbox" [ngClass]="{ \'d-none\': this.rowModelType !== \'clientSide\' }">\n        <input\n            #multiSelectCheckbox\n            [id]="id + \'_MultiSelectCheckbox\'"\n            type="checkbox"\n            (change)="onToggle($event)"\n            class="form-check-input"\n            role="checkbox"\n            [attr.aria-checked]="ariaCheckedState"\n            [attr.aria-label]="headerCheckboxLabel"\n            [disabled]="disabled"\n            [checked]="checkedState"\n            [indeterminate]="indeterminateState"\n        />\n    </div>\n    \x3c!-- Sort template copied from @lib/...grid/components/custom-header/custom-header.component.html --\x3e\n    <div class="d-flex align-items-center w-100 h-100" (click)="onColumnHeaderClick($event)">\n        <div class="customHeaderLabel">{{ params?.displayName }}</div>\n        <div *ngIf="params !== undefined && params[\'infoText\'] !== undefined" class="ps-3">\n            <i class="bi bi-question-circle-fill ms-2" placement="top" [ngbTooltip]="params[\'infoText\']" container="body"></i>\n        </div>\n        \x3c!-- {{ascSort}}-{{descSort}}-{{noSort}} --\x3e\n        <div *ngIf="params !== undefined && params.enableSorting && ascSort === \'active\'" class="ps-3">\n            <i class="bi bi-caret-up-fill"></i>\n        </div>\n        <div *ngIf="params !== undefined && params.enableSorting && descSort === \'active\'" class="ps-3">\n            <i class="bi bi-caret-down-fill"></i>\n        </div>\n        <div *ngIf="params !== undefined && params.enableSorting && noSort === \'active\'" class="bi-caret-up-down-fill ps-3">\n            <i class="bi bi-caret-up-fill params"></i>\n            <i class="bi bi-caret-down-fill"></i>\n        </div>\n    </div>\n</div>\n',styles:[".grid-multiselect-checkbox {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  margin-right: 0.5rem;\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n}\n.grid-multiselect-checkbox input.form-check-input {\n  width: 1rem;\n  height: 1rem;\n}"]}),(0,tslib_es6.Sn)("design:paramtypes",[ngx_translate_core.c$])],UiCustomMultiSelectHeaderComponent)},"./libs/ui/src/lib/modules/grid/components/custom-multiselect-header/custom-multiselect-header.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Grids/CustomMultiSelectHeader",component:__webpack_require__("./libs/ui/src/lib/modules/grid/components/custom-multiselect-header/custom-multiselect-header.component.ts").T,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[]})]},Primary=(args=>({props:args})).bind({});Primary.args={}}}]);