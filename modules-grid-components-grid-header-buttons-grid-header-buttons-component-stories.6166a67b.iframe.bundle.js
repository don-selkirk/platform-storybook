"use strict";(self.webpackChunkplatform_ui=self.webpackChunkplatform_ui||[]).push([[594],{"./libs/ui/src/lib/modules/grid/components/grid-header-buttons/grid-header-buttons.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,default:()=>grid_header_buttons_component_stories});var client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let UiGridHeaderButtonsComponent=class UiGridHeaderButtonsComponent{constructor(){this.buttons=[],this.collapseButtons=!1}setButtonClasses(button){let buttonClasses=" ";return buttonClasses+=this.collapseButtons?"dropdown-item ":"",buttonClasses+=!0!==this.collapseButtons&&button.color?button.color:"btn-outline-primary ",buttonClasses+="prefix"===button.iconPosition?" prefix ":" suffix ",buttonClasses}};UiGridHeaderButtonsComponent.propDecorators={buttons:[{type:core.Input}],collapseButtons:[{type:core.Input}],dropdownButtonLabel:[{type:core.Input}]},UiGridHeaderButtonsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-grid-header-buttons",template:'\x3c!-- Button template for Grid Header Buttons --\x3e\n<ng-template #gridHeaderButtons>\n    <ng-container *ngFor="let button of buttons">\n        <button\n            [id]="button.id"\n            *ngIf="button.divider !== true && button.visible !== false"\n            type="button"\n            class="grid-header-button btn btn-sm d-inline-block"\n            [ngClass]="setButtonClasses(button)"\n            ngbTooltip="{{ button.tooltipText ?? button.text | translate }}"\n            container="body"\n            [placement]="\'top\'"\n            [disabled]="button.disabled === true"\n            (click)="button.clicked($event)"\n            >\n            <i *ngIf="button.icon !== undefined && button.iconVisible !== false && button.iconPosition ===  \'prefix\'" class="prefix bi" [ngClass]="button.icon"></i>\n            <span>{{ button.text | translate }}</span>\n            <i *ngIf="button.icon !== undefined && button.iconVisible !== false && button.iconPosition !==  \'prefix\'" class="suffix bi" [ngClass]="button.icon"></i>\n        </button>\n        <div *ngIf="collapseButtons === true && button.divider === true" class="dropdown-divider"></div>\n    </ng-container>\n</ng-template>\n\x3c!-- END button template --\x3e\n\n<div *ngIf="buttons !== undefined" class="grid-header-buttons-wrapper">\n    <ng-container *ngIf="collapseButtons ?? true; then menuButtons; else inlineButtons"></ng-container>\n\n    \x3c!-- Display each button inline in grid header --\x3e\n    <ng-template #inlineButtons>\n        <ng-container *ngTemplateOutlet="gridHeaderButtons"></ng-container>\n    </ng-template>\n\n    \x3c!-- Display buttons within a dropdown menu --\x3e\n    <ng-template #menuButtons>\n        <div ngbDropdown display="dynamic" container="body" dropdownClass="grid-header-dropdown">\n            <button\n            type="button"\n            class="btn btn-outline-primary btn-sm d-inline-block"\n            [ngClass]="{\'dropdown-label-empty\': !dropdownButtonLabel || dropdownButtonLabel === \'\' }"\n            container="body"\n            ngbDropdownToggle\n            >\n                <span>{{ dropdownButtonLabel | translate }}</span>\n                <i\n                    *ngIf="!dropdownButtonLabel || dropdownButtonLabel === \'\'"\n                    class="bi bi-three-dots-vertical"\n                ></i>\n            </button>\n            <div ngbDropdownMenu>\n                <ng-container *ngTemplateOutlet="gridHeaderButtons"></ng-container>\n            </div>\n        </div>\n    </ng-template>\n</div>\n',styles:[".grid-header-buttons-wrapper {\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.5rem;\n}\n.grid-header-buttons-wrapper button.grid-header-button i.bi.suffix {\n  margin-left: 0.375rem;\n}\n.grid-header-buttons-wrapper button.grid-header-button i.bi.prefix {\n  margin-right: 0.375rem;\n}\n.grid-header-buttons-wrapper button.dropdown-toggle span {\n  padding-right: 0.5rem;\n}\n.grid-header-buttons-wrapper button.dropdown-toggle.dropdown-label-empty::after {\n  content: none;\n  display: none;\n}\n.grid-header-dropdown .grid-header-button.dropdown-item {\n  position: relative;\n  border: none;\n}\n.grid-header-dropdown .grid-header-button.dropdown-item i.bi {\n  position: absolute;\n  left: 0.5rem;\n  top: 0.5rem;\n}\n.grid-header-dropdown .grid-header-button.dropdown-item span {\n  margin-left: 1rem;\n}"]})],UiGridHeaderButtonsComponent);const grid_header_buttons_component_stories={title:"Grids/GridHeaderButtons",component:UiGridHeaderButtonsComponent,decorators:[(0,client.moduleMetadata)({imports:[]})]},Primary=(args=>({props:args})).bind({});Primary.args={buttons:[],collapseButtons:!1,dropdownButtonLabel:""}}}]);