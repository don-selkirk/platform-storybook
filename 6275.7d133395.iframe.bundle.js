"use strict";(self.webpackChunkplatform_ui=self.webpackChunkplatform_ui||[]).push([[6275],{"./libs/ui/src/lib/modules/form-controls/dropdown-multi-select/dropdown-multi-select.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>UiDropdownComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),pill_renderer_component=__webpack_require__("./libs/ui/src/lib/modules/grid/components/pill-renderer/pill-renderer.component.ts"),pill_size_enum=__webpack_require__("./libs/ui/src/lib/modules/form-controls/pills/enums/pill-size.enum.ts"),form_control_base_component=(__webpack_require__("./libs/ui/src/lib/modules/form-controls/dropdown-plus/dropdown-plus.component.ts"),__webpack_require__("./libs/ui/src/lib/modules/form-controls/pills/components/multi-pill/multi-pill.component.ts"),__webpack_require__("./libs/ui/src/lib/modules/form-controls/form-control-base/form-control-base.component.ts"));let UiDropdownComponent=class UiDropdownComponent extends form_control_base_component.I{constructor(){super(...arguments),this.type="input",this.w100=!0,this.maxItemsShown=5,this.showSearch=!0,this.showSelectClearBtns=!0,this.setValueOnChange=!0,this.menuOpen=!1,this.searchText="",this.tooltipText="",this._dropdownPlusOptions=[],this._firstClick=!0,this.optionClicked=()=>{}}get displayValue(){return this._displayValue}set displayValue(setVal){if(setVal&&"string"==typeof setVal&&!1===this.multiSelect){const foundVal=this.options.find((option=>option.readValue===setVal));this._displayValue=foundVal&&foundVal.label?[foundVal.label]:[""]}else setVal&&setVal instanceof Array&&setVal.length>0?this._displayValue=setVal.map((val=>val.label?val.label:"")):setVal&&"object"==typeof setVal&&!1===this.multiSelect?this._displayValue=[setVal.label]:this._displayValue=this.placeholder?[this.placeholder]:[""]}get dropdownPlusOptions(){return this._dropdownPlusOptions}set dropdownPlusOptions(setOpts){null==setOpts||setOpts&&0===setOpts.length?console.warn(`Dropdown options are empty for ${this.formControlName}`):this._dropdownPlusOptions=setOpts.map((setOpt=>({id:setOpt.id,label:setOpt.label,disabled:setOpt.disabled,value:this.markOptionAsSelected(this.value,setOpt)})))}ngOnInit(){this.options&&this.options.length>0&&(this.dropdownPlusOptions=this.options,this._optionsBackup=this.options,this.options.length<this.maxItemsShown&&(this.showSearch=!1)),this.form.controls[this.formControlName].valueChanges.subscribe((changedValues=>{this.dropdownPlusOptions=this.updateOptions(changedValues)})),setTimeout((()=>{this.dropdownRef.view=null,this.dropdownRef.nbgDropdown.display="static",this.dropdownRef.nbgDropdown.placement="bottom-start",this.dropdownRef.nbgDropdown.container=null,this.dropdownRef.nbgDropdown.dropdownClass="dropdown-component-dropdown-menu",this.dropdownRef.nbgDropdown.autoClose="outside",this.dropdownRef.selectionChange.subscribe((event=>{this.onSelectedOptionsChanged(event),this.optionClicked&&this.optionClicked()})),this.dropdownRef.openChange.subscribe((event=>{this.menuOpen=event.open})),this.dropdownRef.optionsCleared.subscribe((event=>{this.options.forEach((option=>{!1===option.disabled&&(option.value=!1)})),this.dropdownPlusOptions=this.options,setTimeout((()=>{this.dropdownRef.clearSelection(),this.onSelectedOptionsChanged({id:this.id,selectedOptions:[]})}))}))}))}ngOnDestroy(){this.dropdownRef.selectionChange.unsubscribe(),this.dropdownRef.openChange.unsubscribe(),this.dropdownRef.optionsCleared.unsubscribe(),this.form.controls[this.formControlName]&&this.form.controls[this.formControlName].valueChanges.unsubscribe()}writeValue(incomingValue){if(null===incomingValue||0===incomingValue.length){this._firstClick=!0;const defaultValue=this.form.controls[this.formControlName].defaultValue;this.value=defaultValue||this.form.controls[this.formControlName].value}else this.value=this.processIncomingValue(incomingValue);this.pills=this.getPillsFromValue(),this.resizeMultiPills(),setTimeout((()=>{this.displayValue=this.value,this.valueChange.emit(this.value)}))}onSelectedOptionsChanged(event){this._firstClick&&(this._firstClick=!1),this.value=this.processIncomingValue(event.selectedOptions),this.pills=this.getPillsFromValue(),this.resizeMultiPills(),setTimeout((()=>{this.displayValue=this.value,this.setValueOnChange&&(this.form.controls[this.formControlName].setValue(event.selectedOptions,{emitEvent:!1}),this.form.controls[this.formControlName].markAsTouched())}))}onTriggerClicked(event){event.preventDefault(),!0!==this.disabled&&void 0!==this.dropdownRef.nbgDropdown&&!1===this.menuOpen&&this.dropdownRef.nbgDropdown.open();const triggerEle=document.getElementById(this.dropdownRef.externalTriggerEleId);void 0!==this.dropdownRef.externalTriggerEleId&&null!==this.dropdownRef.externalTriggerEleId&&null!=triggerEle&&this.dropdownRef.triggerClicked.emit({id:this.id,open:this.menuOpen,selectedOptions:this.dropdownRef.getSelectedItems()})}resizeMultiPills(){setTimeout((()=>{this.multipillRef&&(this.multipillRef.addPillWidth(),this.multipillRef.onResize())}))}onKeyDown(event){!1!==this.disabled||"Enter"!==event.key&&"ArrowDown"!==event.key||(event.preventDefault(),event.stopPropagation(),this.onTriggerClicked(event))}onValueFocus(event){const ele=event.target.getElementsByClassName("value-display")[0];ele&&ele.scrollWidth>ele.offsetWidth?this.tooltipText=event.target.innerText:this.tooltipText=""}setNewOptions(newOptions){this.options=newOptions,this.dropdownPlusOptions=newOptions,this.dropdownRef.setOptions=newOptions,this.updateOptions(newOptions)}updateOptions(changedValues){const updatedOptions=this._optionsBackup||changedValues;if(changedValues&&"string"==typeof changedValues&&!1===this.multiSelect)updatedOptions.map((option=>{if(!1===option.disabled&&option.readValue===changedValues)return option.value=!1,option}));else if(changedValues&&changedValues instanceof Array&&changedValues.length>0)updatedOptions.forEach((option=>{changedValues.map((changedValue=>{if(!1===option.disabled&&option.readValue===changedValue.readValue)return option.value=!0,option}))}));else if(changedValues&&"object"==typeof changedValues&&!1===this.multiSelect)updatedOptions.map((option=>{if(!1===option.disabled&&option.readValue===changedValues.readValue)return option.value=!0,option}));else{if(null==updatedOptions||0===updatedOptions.length)return console.warn(`No Dropdown options available for ${this.formControlName}`),null;updatedOptions.map((option=>(option.value=!1,option)))}return updatedOptions}markOptionAsSelected(value,option){return null!=value&&(this.value&&"string"==typeof value?this.value===option.readValue:!(!this.value||!this.value.find((v=>v.id===option.id))))}processIncomingValue(incomingValue){if("string"==typeof incomingValue&&!1===this.multiSelect){const optionValue=this.convertStringToValue(incomingValue);return optionValue||null}return incomingValue instanceof Array&&incomingValue.length>0?this.convertOptionsToValue(incomingValue):"object"==typeof incomingValue&&incomingValue.length>0?this.convertOptionsToValue([incomingValue]):incomingValue}convertStringToValue(incomingValue){const foundOption=this.options.find((option=>option.readValue===incomingValue));return foundOption?foundOption.readValue:null}convertOptionsToValue(incomingOptions){let newFormControlValue=[];return incomingOptions.forEach((selectedOption=>{const optionLookup=this.options.find((option=>option.label===selectedOption.label));if(!optionLookup)return void console.error("Option not found in dropdown options");const newOption={id:optionLookup.id,label:optionLookup.label,readValue:optionLookup.readValue,value:!0,disabled:!1};this.options.map((option=>{option.label===optionLookup.label&&(option.value=!0)})),newFormControlValue=this.multiSelect?[...newFormControlValue,newOption]:[newOption]})),newFormControlValue}getPillsFromValue(){return null===this.value?[]:!0===this.multiSelect?this.value.map((val=>({value:val.readValue,pillText:val.label,color:pill_renderer_component.xm.neutral,size:pill_size_enum.C.md,hasCloseButton:!1,icon:null}))):[]}};UiDropdownComponent.propDecorators={textInput:[{type:core.ViewChild,args:["textInput"]}],button:[{type:core.ViewChild,args:["button"]}],valuesDisplay:[{type:core.ViewChild,args:["valuesDisplay"]}],selectedValues:[{type:core.ViewChild,args:["selectedValues"]}],multipillRef:[{type:core.ViewChild,args:["multipillRef"]}],dropdownMultiSelect:[{type:core.ViewChild,args:["dropdownMultiSelect"]}],dropdownRef:[{type:core.ViewChild,args:["dropdownRef"]}],nbgDropdown:[{type:core.ViewChild,args:["nbgDropdown"]}],type:[{type:core.Input}],options:[{type:core.Input}],w100:[{type:core.Input}],multiSelect:[{type:core.Input}],maxItemsShown:[{type:core.Input}],showSearch:[{type:core.Input}],showSelectClearBtns:[{type:core.Input}],setValueOnChange:[{type:core.Input}],placeholder:[{type:core.Input}],optionClicked:[{type:core.Input}],resizeMultiPills:[{type:core.HostListener,args:["window:resize"]}]},UiDropdownComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-dropdown",template:'<ng-container [formGroup]="form">\n    \x3c!-- This formGroup is required to remove formGroup missing error--\x3e\n    <ui-form-control-base\n        [formControlName]="formControlName"\n        [form]="form"\n        [label]="label"\n        [placeholder]="placeholder"\n        [showHelpText]="showHelpText"\n        [showSuccessValidation]="showSuccessValidation"\n        [showErrorValidation]="showErrorValidation"\n        [showInfoIcon]="showInfoIcon"\n        [infoText]="infoText"\n        [helpText]="helpText"\n    >\n        <div *ngIf="form !== undefined" class="dropdown-component" #dropdownMultiSelect>\n            \x3c!-- INPUT DISPLAY TYPE --\x3e\n            <div\n                *ngIf="type === \'input\'"\n                #textInput\n                [id]="id + \'_trigger\'"\n                autocomplete="off"\n                type="text"\n                class="form-control dropdown-toggl dropdown-trigger"\n                [ngClass]="{\n                    pointer: disabled === false,\n                    disabled: disabled,\n                    \'is-invalid\': form.controls[formControlName].invalid && form.controls[formControlName].touched && showErrorValidation,\n                    \'is-valid\': form.controls[formControlName].valid && showSuccessValidation,\n                    open: menuOpen === true,\n                    \'multi-select\': multiSelect === true,\n                    \'is-placeholder\': value === undefined || value === null || value.length <= 0\n                }"\n                (click)="onTriggerClicked($event)"\n                (mouseenter)="onValueFocus($event)"\n                tabindex="0"\n                [attr.aria-invalid]="form.controls[formControlName].invalid"\n                [attr.aria-required]="form.controls[formControlName].hasValidator(Validators.required)"\n                (keyup)="onKeyDown($event)"\n            >\n                <ng-container [ngTemplateOutlet]="valuesDisplay"></ng-container>\n            </div>\n            \x3c!-- INPUT DISPLAY TYPE end --\x3e\n\n            \x3c!-- BUTTON DISPLAY TYPE --\x3e\n            <button\n                *ngIf="type === \'button\' || type === \'button-outline\'"\n                #button\n                [id]="id + \'_trigger\'"\n                type="button"\n                class="btn form-control dropdown-toggl dropdown-trigger"\n                [ngClass]="{\n                    \'btn-outline-primary\': type === \'button-outline\',\n                    \'btn-primary\': type === \'button\',\n                    \'w-100\': w100 === true,\n                    \'disabled-dark\': disabled && type === \'button\',\n                    \'disabled-light\': disabled && type === \'button-outline\',\n                    \'is-invalid\': form.controls[formControlName].invalid && form.controls[formControlName].touched && showErrorValidation,\n                    \'is-valid\': form.controls[formControlName].valid && showSuccessValidation,\n                    \'multi-select\': multiSelect === true,\n                    \'is-placeholder\': value === undefined || value === null || value.length <= 0\n                }"\n                (click)="onTriggerClicked($event)"\n                (mouseenter)="onValueFocus($event)"\n                [attr.aria-invalid]="form.controls[formControlName].invalid"\n                [attr.aria-required]="form.controls[formControlName].hasValidator(Validators.required)"\n            >\n                <ng-container [ngTemplateOutlet]="valuesDisplay"></ng-container>\n            </button>\n            \x3c!-- BUTTON DISPLAY TYPE end --\x3e\n\n            <ui-dropdown-plus\n                #dropdownRef\n                [id]="id"\n                [externalTriggerEleId]="id + \'_trigger\'"\n                [animIcon]="true"\n                [setOptions]="dropdownPlusOptions"\n                [disabled]="disabled"\n                [small]="true"\n                [paddingTop]="3"\n                [showSearch]="showSearch"\n                [multiSelect]="multiSelect"\n                [maxItemsShown]="maxItemsShown"\n                [showSelectClearBtns]="showSelectClearBtns"\n                [view]="\'none\'"\n                [ngClass]="{\n                    \'w-100\': w100 === true,\n                    \'show-search\': showSearch === true,\n                    \'show-buttons\': showSelectClearBtns === true,\n                    \'multi-select\': multiSelect === true\n                }"\n                class="dropdown-plus"\n            >\n            </ui-dropdown-plus>\n        </div>\n    </ui-form-control-base>\n</ng-container>\n\n<ng-template #valuesDisplay>\n    <ng-container *ngIf="value && value.length > 0 && multiSelect === true">\n        <ng-container [ngTemplateOutlet]="selectedValues"></ng-container>\n    </ng-container>\n    <ng-container *ngIf="value && value.length > 0 && multiSelect !== true">\n        <ng-container [ngTemplateOutlet]="selectedValues"></ng-container>\n    </ng-container>\n    <ng-container *ngIf="value === undefined || value === null || value.length <= 0">\n        <span class="value-display" ngbTooltip="{{ placeholder }}">{{ placeholder | translate }}</span>\n    </ng-container>\n\n    \x3c!-- DROPDOWN CARET ICON --\x3e\n    <i\n        class="d-inline-block anim bi trigger-icon"\n        [id]="id + \'_triggerIcon\'"\n        [ngClass]="{\n            \'bi-caret-down-fill\': menuOpen === false,\n            \'bi-caret-up-fill\': menuOpen === true\n        }"\n    >\n    </i>\n\n</ng-template>\n\n<ng-template #selectedValues>\n    \x3c!-- DISPLAY VALUES AS TEXT --\x3e\n    <ng-container *ngIf="multiSelect === false">\n        <span *ngFor="let value of displayValue"\n            class="value-display"\n            [ngbTooltip]="tooltipText"\n            [tooltipClass]="\'tooltip-sm\'"\n        >\n            {{ value | translate }}\n        </span>\n    </ng-container>\n\n    \x3c!-- DISPLAY VALUES AS PILLS --\x3e\n    <ng-container *ngIf="multiSelect === true">\n        <ui-multi-pill\n            class="value-display"\n            #multipillRef\n            [pills]="pills"\n            [isAggregated]="true"\n        ></ui-multi-pill>\n    </ng-container>\n</ng-template>\n',styles:[".dropdown-component .disabled {\n  pointer-events: none !important;\n  text-decoration: none;\n  background-color: #edeff0 !important;\n  border-color: #dbdee1;\n  color: #a8abae !important;\n  opacity: 0.65;\n}\n.dropdown-component .disabled-dark {\n  background-color: #a8abae !important;\n  border-color: #a8abae !important;\n  color: #fff !important;\n  opacity: 0.65;\n}\n.dropdown-component .disabled-light {\n  background-color: transparent !important;\n  border-color: #dbdee1;\n  color: #a8abae !important;\n  opacity: 0.65;\n}"]})],UiDropdownComponent)},"./libs/ui/src/lib/modules/form-controls/form-base/form-base.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>UiFormBaseComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js");let UiFormBaseComponent=class UiFormBaseComponent{constructor(){this.formStatusChange=new core.EventEmitter,this.formClosed=new core.EventEmitter,this.formSubmitted=new core.EventEmitter,this.payload={},this.modeChanged=!1,this.showSuccessValidation=!1,this.showErrorValidation=!0,this.showHelpText=!0,this.showInfoIcon=!0,this.Validators=fesm2020_forms.Validators,this._ngUnsubscribe=new Subject.B,this._editMode=!1}set editMode(value){this._editMode=value,!0===this._editMode?this.enableAllInputs():this.disableAllInputs()}get editMode(){return this._editMode}ngOnInit(){}ngOnDestroy(){this._ngUnsubscribe.next(null),this._ngUnsubscribe.complete()}createForm(formControls){this.form=new fesm2020_forms.FormGroup({});for(const[key,value]of Object.entries(formControls)){const newControl=new fesm2020_forms.FormControl(value.value,{validators:value.validators});this.form.setControl(key,newControl)}this.editMode=!1}setValues(FormValues){Object.keys(this.form.controls).forEach((key=>{this.form.controls[key].setValue(FormValues[key])}))}viewForm(){this.editMode=!1}editForm(){this._initialValues=JSON.parse(JSON.stringify(this.form.value)),this.editMode=!0}clearForm(){this._initialValues=JSON.parse(JSON.stringify(this.form.value)),this.form.reset(),this.payload={}}cancelForm(){this.form.reset(this._initialValues),this.payload={},this.editMode=!1}closeForm(){this.editMode=!1,this.formClosed.emit()}submitForm(){return Object.keys(this.form.controls).forEach((key=>{this.payload[key]=this.form.controls[key].value})),this.editMode=!1,this.formSubmitted.emit(this.form.value),this.form.value}onClearBtnClick(){this.clearForm()}onEditBtnClick(){this.editForm()}onCancelBtnClick(){this.cancelForm()}onCloseBtnClick(){this.closeForm()}onSaveBtnClick(){this.submitForm()}onFormOptionsChanged(e){this.showInfoIcon=e.showInfoIcon,this.showHelpText=e.showHelpText}disableAllInputs(){if(void 0!==this.form)for(const control in this.form.controls)this.form.controls.hasOwnProperty(control)&&this.form.controls[control].disable()}enableAllInputs(){if(void 0!==this.form)for(const control in this.form.controls)this.form.controls.hasOwnProperty(control)&&(void 0!==this.formControls[control].config&&void 0!==this.formControls[control].config.forceDisabled?!1===this.formControls[control].config.forceDisabled&&(this.form.controls[control].enable(),this.form.controls[control].markAsUntouched()):(this.form.controls[control].enable(),this.form.controls[control].markAsUntouched()))}};UiFormBaseComponent.ctorParameters=()=>[],UiFormBaseComponent.propDecorators={actionBtnsRef:[{type:core.ViewChild,args:["actionBtnsRef"]}],formStatusChange:[{type:core.Output}],formClosed:[{type:core.Output}],formSubmitted:[{type:core.Output}],editMode:[{type:core.Input,args:["editMode"]}]},UiFormBaseComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-form-base",template:"<p>Implement your form template in your extended component.</p>\n",styles:[""]}),(0,tslib_es6.Sn)("design:paramtypes",[])],UiFormBaseComponent)},"./libs/ui/src/lib/modules/form-controls/form-control-base/form-control-base.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>UiFormControlBaseComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");__webpack_require__("./libs/ui/src/lib/modules/form-controls/form-base/form-base.component.ts");let UiFormControlBaseComponent=class UiFormControlBaseComponent{constructor(ngControl){this.ngControl=ngControl,this.forceDisabled=!1,this.label="",this.placeholder="",this.prefixIcon="",this.suffixIcon="",this.prefixText="",this.suffixText="",this.helpText="",this.showHelpText=!0,this.showSuccessValidation=!1,this.showErrorValidation=!0,this.showInfoIcon=!0,this.infoText="",this.patternErrorText="",this.errorStrings={},this.valueChange=new core.EventEmitter,this.value="",this.defaultErrorStrings={},this.Validators=fesm2020_forms.Validators,this.ngControl&&(this.ngControl.valueAccessor=this)}set config(config){if(this._config=config,void 0!==config)for(const[key,value]of Object.entries(this._config))null!==value&&""!==value&&(this[key]=value)}get config(){return this._config}ngOnInit(){void 0!==this.formComponent&&void 0!==this.formComponent.formControls[this.formControlName].config&&(this.config=this.formComponent.formControls[this.formControlName].config),void 0!==this.form&&(this._subscription=this.form.controls[this.formControlName].valueChanges.subscribe((e=>{this.form.controls[this.formControlName].setValue(e,{emitEvent:!1})}))),this.defaultErrorStrings={minlength:{stringCode:"COMMON.MIN_LENGTH_OF"},maxlength:{stringCode:"COMMON.MAX_LENGTH_OF"},required:{stringCode:"COMMON.FIELD_IS_REQUIRED"},email:{stringCode:"COMMON.ENTER_VALID_EMAIL"},pattern:{stringCode:this.patternErrorText}},this.setErrorString()}setErrorString(){void 0!==this.form&&null!==this.form.controls[this.formControlName].errors&&(this.errorStrings=this.defaultErrorStrings,void 0!==this.config&&void 0!==this.config.errorStrings&&(this.errorStrings=Object.assign(Object.assign({},this.defaultErrorStrings),this.config.errorStrings)))}ngOnDestroy(){var _a;null===(_a=this._subscription)||void 0===_a||_a.unsubscribe()}writeValue(value){this.value=value,this.setErrorString()}setDisabledState(isDisabled){this.disabled=isDisabled}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}onChange(e){}onTouched(){}};UiFormControlBaseComponent.ctorParameters=()=>[{type:fesm2020_forms.NgControl,decorators:[{type:core.Self},{type:core.Optional}]}],UiFormControlBaseComponent.propDecorators={formControlName:[{type:core.Input,args:["formControlName"]}],id:[{type:core.Input}],disabled:[{type:core.Input}],forceDisabled:[{type:core.Input}],label:[{type:core.Input}],placeholder:[{type:core.Input}],type:[{type:core.Input}],form:[{type:core.Input}],formComponent:[{type:core.Input}],prefixIcon:[{type:core.Input}],suffixIcon:[{type:core.Input}],prefixText:[{type:core.Input}],suffixText:[{type:core.Input}],helpText:[{type:core.Input}],showHelpText:[{type:core.Input}],showSuccessValidation:[{type:core.Input}],showErrorValidation:[{type:core.Input}],showInfoIcon:[{type:core.Input}],infoText:[{type:core.Input}],patternErrorText:[{type:core.Input}],errorStrings:[{type:core.Input}],config:[{type:core.Input}],valueChange:[{type:core.Output}]},UiFormControlBaseComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-form-control-base",template:'<div *ngIf="form !== undefined">\n\n    \x3c!-- Label --\x3e\n    <label [id]="id + \'_Label\'" for="formControlName">\n        {{label}}\n        \x3c!-- Required Asterix --\x3e\n        <span [id]="id + \'_RequiredAsterisk\'" *ngIf="form.controls[formControlName].hasValidator(Validators.required)">*</span>\n    </label>\n\n    \x3c!-- Info Icon with Tooltip (infoText) --\x3e\n    <i [id]="id + \'_InfoIcon\'" *ngIf="showInfoIcon && infoText !== \'\'" class="bi bi-question-circle-fill" placement="top" [ngbTooltip]="infoText"></i>\n\n    <div class="input-group">\n\n        \x3c!-- Prefix Icon --\x3e\n        <span *ngIf="prefixIcon !== \'\'" class="input-group-text">\n            <i [id]="id + \'_PrefixIcon\'" class="bi" aria-hidden="true" [ngClass]="prefixIcon"></i>\n        </span>\n\n        \x3c!-- Prefix Text --\x3e\n        <span [id]="id + \'_PrefixText\'" *ngIf="prefixText !== \'\'" class="input-group-text">\n            {{prefixText}}\n        </span>\n\n        <div #contentWrapper class="w-100">\n            <ng-content></ng-content>\n        </div>\n\n        \x3c!-- Suffix Icon --\x3e\n        <span [id]="id + \'_SuffixIcon\'" *ngIf="suffixIcon !== \'\'" class="input-group-text">\n            <i class="bi" aria-hidden="true" [ngClass]="suffixIcon"></i>\n        </span>\n\n        \x3c!-- Suffix Text --\x3e\n        <span [id]="id + \'_SuffixText\'" *ngIf="suffixText !== \'\'" class="input-group-text">\n            {{suffixText}}\n        </span>\n\n    </div>\n\n    <div class="feedback">\n\n        \x3c!-- Success Feedback Text --\x3e\n        <div [id]="id + \'_SuccessText\'" class="success-text" *ngIf="form.controls[formControlName].valid && showSuccessValidation">\n            {{ \'COMMON.LOOKS_GOOD\' | translate }}\n        </div>\n\n        \x3c!-- Error Feedback Text --\x3e\n        <div class="error-text" *ngIf="form.controls[formControlName].invalid && form.controls[formControlName].touched && showErrorValidation">\n            <div *ngFor="let item of form.controls[formControlName].errors | keyvalue">\n                \x3c!-- If errorString have NO parameters --\x3e\n                <ng-container *ngIf="defaultErrorStrings[item.key] !== undefined && defaultErrorStrings[item.key].stringParams === undefined">\n                    {{errorStrings[item.key].stringCode | translate: form.controls[formControlName].errors[item.key] }}\n                </ng-container>\n                \x3c!-- If errorString HAVE parameters --\x3e\n                <ng-container *ngIf="errorStrings[item.key] !== undefined && errorStrings[item.key].stringParams !== undefined">\n                 {{errorStrings[item.key].stringCode | translate: concatErrors(form.controls[formControlName].errors[item.key], errorStrings[item.key].stringParams) }}\n                </ng-container>\n            </div>\n        </div>\n\n        \x3c!-- Help Text --\x3e\n        \x3c!-- Show only if Error Feedback Text is hidden  --\x3e\n        <div *ngIf="!(form.controls[formControlName].invalid && form.controls[formControlName].touched && showErrorValidation)">\n            <div [id]="id + \'_HelpText\'" *ngIf="showHelpText && helpText !== \'\'" class="help-text">{{helpText}}</div>\n        </div>\n    </div>\n</div>\n',styles:[""]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2020_forms.NgControl])],UiFormControlBaseComponent)},"./libs/ui/src/lib/modules/form-controls/pills/components/multi-pill/multi-pill.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K:()=>UiMultiPillComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),pill_size_enum=__webpack_require__("./libs/ui/src/lib/modules/form-controls/pills/enums/pill-size.enum.ts");let UiMultiPillComponent=class UiMultiPillComponent{constructor(){this.isAggregated=!0,this.pills=new Array,this.aggregatePillCount=0,this.aggregatePillTextArray=new Array,this.sizeArray=new Array}ngOnInit(){this.sizeArray=new Array,this.pillConfig()}pillConfig(){if(this.setPillId(),this.isAggregated&&setTimeout((()=>{this.aggregatePillCount=0,this.checkColumnWidth()}),10),!0===this.isAggregated)for(let i=0;i<this.pills.length;i++)this.pills[i].hasCloseButton=!1;else if(!1===this.isAggregated&&this.pills.some((e=>!0===e.hasCloseButton)))for(let i=0;i<this.pills.length;i++)this.pills[i].hasCloseButton=!0;if(new Set(this.pills).size===this.pills.length)for(let i=0;i<this.pills.length;i++)this.pills[i].size=pill_size_enum.C.md;this.aggregatePillColor=this.pills[this.pills.length-1].color}removePill(pill){this.pills.splice(this.pills.indexOf(pill),1)}ngAfterViewInit(){this.addPillWidth()}addPillWidth(){this.sizeArray=new Array;for(let i=0;i<this.pills.length;i++)null!==this.container&&this.sizeArray.push(this.uiPill.toArray()[i].nativeElement.offsetWidth)}checkColumnWidth(){if(this.size=0,!0===this.isAggregated)for(let i=0;i<this.uiPill.length;i++)this.size+=this.sizeArray[i],this.size<this.container.nativeElement.clientWidth-50?(this.uiPill.toArray()[i].nativeElement.classList.remove("hidden-pill"),this.uiPill.toArray()[i].nativeElement.querySelector(".rounded-pill").classList.remove("hidden")):(this.uiPill.toArray()[i].nativeElement.classList.add("hidden-pill"),this.uiPill.toArray()[i].nativeElement.querySelector(".rounded-pill").classList.add("hidden"),this.aggregatePillCount++,this.aggregatePillTextArray.push(" "+this.uiPill.toArray()[i].nativeElement.textContent))}setPillId(){for(let i=0;i<this.pills.length;i++)this.pills[i].id="pills-"+i}addPill(newPills){this.aggregatePillTextArray=new Array;for(let i=0;i<newPills.length;i++)this.pills.push(newPills[i]);setTimeout((()=>{this.addPillWidth()}),10),this.pillConfig()}getPillData(id){return this.pills[id]}onResize(){this.aggregatePillCount=0,this.aggregatePillTextArray=new Array,this.checkColumnWidth()}};UiMultiPillComponent.ctorParameters=()=>[],UiMultiPillComponent.propDecorators={isAggregated:[{type:core.Input}],pills:[{type:core.Input}],container:[{type:core.ViewChild,args:["container"]}],uiPill:[{type:core.ViewChildren,args:["uiPill",{read:core.ElementRef}]}],uiPillList:[{type:core.ViewChildren,args:["uiPill"]}],onResize:[{type:core.HostListener,args:["window:resize"]}]},UiMultiPillComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-multi-pill",template:'\n<div [ngClass]="{ \'multi-pill-container\': isAggregated === true }" id="multi-pill-container" #container>\n    <ui-pill\n    #uiPill\n        *ngFor="let pill of pills"\n        [pillText]="pill.pillText"\n        [hasCloseButton]="pill.hasCloseButton"\n        [color]="pill.color"\n        [icon]="pill.icon"\n        [size]="pill.size"\n        [value]="pill.value"\n        [id]="pill.id"\n        [isAggregated]="isAggregated"\n        [ngClass]="{ \'is-aggregated\': isAggregated === true }"\n        (xButtonClick)="removePill(pill)"\n    >\n    </ui-pill>\n    <span\n        *ngIf="isAggregated && aggregatePillCount > 0"\n        id="aggregate-pill"\n        class="badge {{ aggregatePillColor }} rounded-pill float-start noHover {{ pills.size }}"\n        [ngbTooltip]="aggregatePillTextArray"\n        tooltipClass="pill-tooltip"\n    >\n        +{{ aggregatePillCount }}\n    </span>\n</div>\n',styles:[".multi-pill-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 0.3rem;\n}\n.multi-pill-container .hidden-pill {\n  display: none;\n}"]}),(0,tslib_es6.Sn)("design:paramtypes",[])],UiMultiPillComponent)},"./libs/ui/src/lib/modules/form-controls/pills/enums/pill-size.enum.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{var UiPillSizeEnum;__webpack_require__.d(__webpack_exports__,{C:()=>UiPillSizeEnum}),function(UiPillSizeEnum){UiPillSizeEnum.sm="sm",UiPillSizeEnum.md="md",UiPillSizeEnum.lg="lg"}(UiPillSizeEnum||(UiPillSizeEnum={}))},"./libs/ui/src/lib/modules/grid/components/pill-renderer/pill-renderer.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{xm:()=>UiPillClassEnum,Wj:()=>UiPillRendererComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var UiBadgeTypeEnum,UiPackageEnum,UiPackageClassEnum,UiStatusEnum,UiStatusClassEnum,UiIdentifierEnum,UiIdentifierClassEnum,UiPillEnum,UiPillClassEnum,core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");!function(UiBadgeTypeEnum){UiBadgeTypeEnum.status="status",UiBadgeTypeEnum.package="package",UiBadgeTypeEnum.notification="notification",UiBadgeTypeEnum.identifier="identifier",UiBadgeTypeEnum.pill="pill"}(UiBadgeTypeEnum||(UiBadgeTypeEnum={})),function(UiPackageEnum){UiPackageEnum.gold="gold",UiPackageEnum.silver="silver",UiPackageEnum.platinum="platinum"}(UiPackageEnum||(UiPackageEnum={})),function(UiPackageClassEnum){UiPackageClassEnum.gold="dot-gold",UiPackageClassEnum.silver="dot-silver",UiPackageClassEnum.platinum="dot-platinum"}(UiPackageClassEnum||(UiPackageClassEnum={})),function(UiStatusEnum){UiStatusEnum.neutral="neutral",UiStatusEnum.success="success",UiStatusEnum.info="info",UiStatusEnum.danger="danger",UiStatusEnum.caution="caution",UiStatusEnum.warning="warning",UiStatusEnum.tertiary="tertiary",UiStatusEnum.dimgrey="dimgrey"}(UiStatusEnum||(UiStatusEnum={})),function(UiStatusClassEnum){UiStatusClassEnum.neutral="dot-neutral",UiStatusClassEnum.success="dot-success",UiStatusClassEnum.caution="dot-caution",UiStatusClassEnum.warning="dot-warning",UiStatusClassEnum.danger="dot-danger",UiStatusClassEnum.info="dot-info",UiStatusClassEnum.tertiary="dot-tertiary",UiStatusClassEnum.dimgrey="dot-dimgrey"}(UiStatusClassEnum||(UiStatusClassEnum={})),function(UiIdentifierEnum){UiIdentifierEnum.neutral="neutral",UiIdentifierEnum.category1="category1",UiIdentifierEnum.category2="category2",UiIdentifierEnum.category3="category3",UiIdentifierEnum.category4="category4",UiIdentifierEnum.category5="category5",UiIdentifierEnum.category6="category6"}(UiIdentifierEnum||(UiIdentifierEnum={})),function(UiIdentifierClassEnum){UiIdentifierClassEnum.Neutral="identifier-neutral",UiIdentifierClassEnum.category1="identifier-category-1",UiIdentifierClassEnum.category2="identifier-category-2",UiIdentifierClassEnum.category3="identifier-category-3",UiIdentifierClassEnum.category4="identifier-category-4",UiIdentifierClassEnum.category5="identifier-category-5",UiIdentifierClassEnum.category6="identifier-category-6"}(UiIdentifierClassEnum||(UiIdentifierClassEnum={})),function(UiPillEnum){UiPillEnum.neutral="neutral",UiPillEnum.category1="category1",UiPillEnum.category2="category2",UiPillEnum.category3="category3",UiPillEnum.category4="category4",UiPillEnum.category5="category5",UiPillEnum.category6="category6",UiPillEnum.success="success",UiPillEnum.warning="warning",UiPillEnum.danger="danger",UiPillEnum.info="info",UiPillEnum.extreme="extreme"}(UiPillEnum||(UiPillEnum={})),function(UiPillClassEnum){UiPillClassEnum.neutral="badge-neutral",UiPillClassEnum.category1="badge-category-1",UiPillClassEnum.category2="badge-category-2",UiPillClassEnum.category3="badge-category-3",UiPillClassEnum.category4="badge-category-4",UiPillClassEnum.category5="badge-category-5",UiPillClassEnum.category6="badge-category-6",UiPillClassEnum.success="badge-success",UiPillClassEnum.warning="badge-warning",UiPillClassEnum.danger="badge-danger",UiPillClassEnum.info="badge-info",UiPillClassEnum.extreme="badge-extreme"}(UiPillClassEnum||(UiPillClassEnum={}));let UiPillRendererComponent=class UiPillRendererComponent{constructor(){this.pillClasses=[],this.pillText="",this.pillTextTranslationId="",this.color="",this.type="",this.cls=""}refresh(params){return this.update(params),!0}ngOnInit(){}agInit(params){this.update(params)}ngOnDestroy(){}clickedHandler(e){void 0!==this.params.clicked&&this.params.clicked(this.params.value)}update(params){this.params=params,this.pillClasses=params.pillClasses,this.pillText=params.pillText,this.pillTextTranslationId=params.pillTextTranslationId,this.type=params.type,this.color=params.color,this.cls="",this.type===UiBadgeTypeEnum.status&&(this.cls=UiStatusClassEnum[this.color]),this.type===UiBadgeTypeEnum.package&&(this.cls=UiPackageClassEnum[this.color]),this.type===UiBadgeTypeEnum.pill&&(this.cls=UiPillClassEnum[this.color]),this.type,UiBadgeTypeEnum.notification,this.type,UiBadgeTypeEnum.identifier}};UiPillRendererComponent.ctorParameters=()=>[],UiPillRendererComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ui-pill-renderer",template:'\x3c!-- Status --\x3e\n<div class="" (click)="clickedHandler($event)" *ngIf="type=== \'status\'">\n    <span class="dot sm" [ngClass]="cls"></span>\n    <span class="dot-text sm">\n        <ng-container *ngIf="pillText !== \'\'">\n            {{pillText | translate}}\n        </ng-container>\n    </span>\n</div>\n\n\x3c!-- Pill --\x3e\n<div (click)="clickedHandler($event)" *ngIf="type=== \'pill\'">\n    <span class="badge rounded-pill noHover sm" [ngClass]="cls">\n        <ng-container *ngIf="pillText !== \'\'">\n            {{pillText | translate}}\n        </ng-container>\n    </span>\n</div>\n\n\x3c!-- Package --\x3e\n<div (click)="clickedHandler($event)" *ngIf="type=== \'package\'">\n    <span class="dot md" [ngClass]="cls"></span>\n    <span class="package-text">\n        <ng-container *ngIf="pillText !== \'\'">\n            {{pillText | translate}}\n        </ng-container>\n    </span>\n</div>\n\n\x3c!-- Notification --\x3e\n<div (click)="clickedHandler($event)" *ngIf="type === \'notification\'">\n    <span class="dot-notification sm">\n        <ng-container *ngIf="pillText !== \'\'">\n            {{pillText | translate}}\n        </ng-container>\n    </span>\n</div>\n\n\x3c!-- Identifier --\x3e\n<div (click)="clickedHandler($event)" *ngIf="type === \'identifier\'">\n    <span class="identifier identifier-neutral sm">\n        <ng-container *ngIf="pillText !== \'\'">\n            {{pillText | translate}}\n        </ng-container>\n    </span>\n</div>',styles:[""]}),(0,tslib_es6.Sn)("design:paramtypes",[])],UiPillRendererComponent)}}]);